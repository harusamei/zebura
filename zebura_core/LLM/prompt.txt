# 存放任务指令模板，格式为：<TASK: xxx> ... </TASK>
# ignore #开头的行

<TASK: rewrite>
# 将多轮对话，重写为一条查询语句
Given a conversation (between Human and Assistant) and a follow up message from Human, using the prior knowledge relationships, rewrite the message to be a standalone and detailed question that captures all relevant context from the conversation. Ensure the rewritten question:
1. Preserves the original intent of the follow-up message.
2. If the true intent of the follow-up message cannot be determined, make no modifications to avoid generating an incorrect question.
3. The length of the rewritten question should not increase significantly compared to the follow-up message, to avoid altering the original intent.
4. Do not directly use the content of the Assistant's responses to form the rewritten question. Prioritize referring to the information of the Human's historical question.
5. Maintains the same language as the follow-up message (e.g., reply in Chinese if the question was asked in Chinese and in English if it was asked in English).

Chat History (Sorted by request time from most recent to oldest):
{history_context}

Follow Up Input: 
{query}
**NOTE:** Please respond in SAME language as the input message.

Refined Standalone Question:
</TASK>

<TASK:rewrite_nlsql>
# 将多轮对话，重写为一条查询语句
You are a chatbot that assists users in converting their natural language questions into SQL queries for database searching. 
Given the multi-turn dialogue below between a user and the agent, along with the user's final question, rewrite the user's final question into a clearer and more structured form that can be easily translated into an SQL query. Your rewritten question should be specific, concise, and detail the data the user wants to retrieve or the operations they want to perform on the database.
Example Dialogue:

User: I'm trying to find the total sales amount for each product in our store last month. How can I do that?
Agent:
SELECT product_name, SUM(sales_amount) 
FROM sales 
WHERE sale_date BETWEEN '2023-05-01' AND '2023-05-31' 
GROUP BY product_name;

User: And what about the top 5 products with the highest sales last month?
Agent:
no result in database

User's final question: average sales amount per product

Your Task:
Rewrite the user's final question into a clearer and more structured form that is easy to translate into an SQL query.
Example Rewritten Question:
"Can you provide the average sales amount for each product sold in the store during May 2023?"
History dialogue:
{history_context}

User's final question:
</TASK>

<TASK: nl2SQL_zero>

Database Schema:
{dbSchema}
Note: 
Please ensure that any value appearing in the SQL must also appear in the query and must be in the same language.
If it cannot be converted due to missing information, please output 'NOSQL' and prompt the user for the missing information.

Format:
Input: [User's natural language statement]
Output: [Converted SQL query in code format or "NOSQL，ask the user for the specific missing information"]

</TASK>
<TASK: nl2SQL>
Follow these guidelines:
Conversion Requirement:
If the input intention can be converted into SQL, do so.
If it cannot be converted, output "NOSQL".
Value Consistency:
Ensure that any values included in the SQL query exactly match those mentioned in the input.
Database Information:

If additional database information (e.g., table names, column names) is required for the conversion and is not provided in the input, ask the user for the necessary details.

Database Schema:
{dbSchema}
# Table names and purposes:
# Table name: users, Purpose: Stores user information

# Table fields and their aliases:
# users:
# 
# id: Unique identifier for the user (Alias: user_id)
# name: Name of the user (Alias: user_name)
# email: Email address of the user (Alias: user_email)
# registration_date: Date when the user registered (Alias: user_registration_date)
# registration_year: Year when the user registered (Alias: user_registration_year)

Example Input and Output:
{fewShots}
# Input: "Find all users who registered in 2021."
# Output:
# sql
# SELECT * FROM users WHERE registration_year = 2021;
# 
# Input: "Show me the sales data for March."
# Output: NOSQL (if table and column names are not provided)

Note: Please ensure that any value appearing in the SQL must also appear in the query and must be in the same language. If a direct conversion is impossible due to missing information, do not make assumptions—ask the user for clarification.

Format:
Input: [User's natural language statement]
Output: [Converted SQL query in code format or "NOSQL"]
</TASK>

<TASK:nl2SQL_zh>
# data schema 没有字段说明， zero-shot
你将会收到一个自然语言查询，任务是将其转换为相应的SQL查询。根据提供的数据模式（schema），在输出时遵循以下规则：

SQL查询使用代码格式。
如果输入的意图不是数据查询，则直接输出"nosql"。
如果转换时需要其他数据库信息，请直接向用户询问。
如果SQL中包含值，这些值需要与输入中提到的值一致。
数据模式：
{dbSchema}

示例输入与输出：
{fewShots}

注意：确保SQL查询中的数据值必须出现在query中,并且与query所用的语言一致。如果由于缺少信息而无法进行直接转换，请勿做出假设，而是向用户寻求澄清。
</TASK>

<TASK: nl2SQL_lite>
# dbSchema 没有字段说明， zero-shot

You will receive a natural language query, and your task is to convert it into an appropriate SQL query. Based on the provided data schema, follow these rules for output:
Use code formatting for SQL queries.
If the input intent is not a data query, output "nosql".
If additional database information is needed for conversion, directly ask the user.
If the SQL query includes values, ensure these values match those mentioned in the input.

Data Schema:
{dbSchema}

# Table names and purposes:
# Table name: users, Purpose: Stores user information
# Table name: orders, Purpose: Stores order information
# Table name: products, Purpose: Stores product information

# Table fields and their aliases:
# Table: employees (id,name,department,salary,hire_date)
# Table: departments (id,name)
# Table: salaries(employee_id,amount,effective_date)
                   
Example Inputs and Outputs:
{fewShots}
# Input: "List all employees' names and departments."
# Output:
# 
# sql
# 
# SELECT employees.name, departments.name
# FROM employees
# JOIN departments ON employees.department = departments.id;
# 
# Input: "Tell me the average salary for each department."
# Output:
# 
# sql
# 
# SELECT departments.name, AVG(salaries.amount) AS average_salary
# FROM employees
# JOIN salaries ON employees.id = salaries.employee_id
# JOIN departments ON employees.department = departments.id
# GROUP BY departments.name;
# 
# Input: "I want to insert a new employee record."
# Output:
# nosql
# 
# Input: "List the names and hire dates of all employees hired after 2020."
# Output:
# 
# sql
# SELECT name, hire_date
# FROM employees
# WHERE hire_date > '2020-01-01';

</TASK>

# 根据db schema生成查询DB的自然语言问题
<TASK: db2nl>
You are provided with a detailed schema of a relational database. This schema includes the names of tables, their columns, data types, and relationships between tables (foreign keys). Your task is to generate various natural language questions that could be asked to query information from this database. The questions should cover a wide range of query types, including but not limited to data retrieval, aggregations, updates, and joins.

Instructions:

Carefully read the provided database schema to understand the structure and relationships between tables.
Generate a set of natural language questions based on the schema. Aim for diversity in the types of questions, including:
Simple retrieval questions
Aggregation and summary questions
Update or modification questions
Questions involving joins across multiple tables
Conditional retrieval questions
Ensure the questions are clear and unambiguous, reflecting typical queries a user might ask to interact with this database.

For each of the above natural language questions in Chinese, convert them into corresponding SQL queries

Example Database Schema:

Input: 
database schema:

1. Customers
CustomerID
Name 
Email 
PhoneNumber 

2. Orders
OrderID
OrderDate 
CustomerID 
TotalAmount 

3. Products
ProductID 
ProductName 
Price 

4. OrderDetails
OrderDetailID
OrderID
ProductID
Quantity
Subtotal

Output:  
Natural Language Question: 找到所有客户的名称和电子邮件地址。
SQL Query:
SELECT Name, Email
FROM Customers;

Natural Language Question: 找出在2024年5月下订单的客户ID和订单ID。
SQL Query:
SELECT CustomerID, OrderID
FROM Orders
WHERE OrderDate BETWEEN '2024-05-01' AND '2024-05-31';

Natural Language Question: 获取所有订单的总金额大于1000的订单ID和总金额。
SQL Query:
SELECT OrderID, TotalAmount
FROM Orders
WHERE TotalAmount > 1000;

Now, generate a comprehensive list of natural language questions and SQL queries based on the provided db schema.
Note, natural language questions must be related to the database schema, and the fields of the SQL query must be within the database schema.
</TASK>

<TASK: db2sql>
You will be provided with a database schema. Your task is to generate a diverse set of SQL queries based on the given schema. 
Ensure that the generated queries involve different tables and fields from the schema, and include various SQL operations (e.g., SELECT, INSERT, UPDATE, DELETE, etc.). 
Provide detailed queries and make each query unique and meaningful. 

Please generate the following types of SQL queries:

A simple SELECT query including multiple fields from one table.
A query with a JOIN operation involving at least two tables.
A SELECT query with a subquery.
An INSERT query to insert data into a table.
An UPDATE query to update specific records in a table.
A DELETE query to delete specific records from a table.
A query including aggregate functions (e.g., COUNT, SUM, AVG, etc.).
A query with GROUP BY and HAVING clauses.
Please ensure that each query aligns with the provided database schema.

Below is the detailed information of the schema:
</TASK>
