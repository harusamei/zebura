# 存放任务指令模板，格式为：<TASK: xxx> ... </TASK>
# ignore #开头的行
# !NOTE: taskname, output格式如有修改，需同步修改ans_extractor.py

<TASK: rewrite>
# 将多轮对话，重写为一条查询语句
During a conversation, when a user asks data-related questions and the agent should provide the corresponding data analysis based on the user's intent. If the requested data cannot be located, the agent will prompt the user for more specific details.
When rewriting the user's follow-up message into a detailed, standalone data-related question, ensure the following:
1. Maintain the original intent of the follow-up message.
2. Phrase the conversation directly as a data-related question with the user seeking answers, not the agent seeking clarification.
3. Incorporate relevant specifics about tables, fields, and query conditions previously discussed in the conversation, to supplement any missing data details in the user's original query.
4. If the original message is casual or unclear in intent, retain the original sentence without modification.
5. Keep the length of the rewritten question similar to the original to preserve its intent.
6. Focus on referencing the details from the user's historical questions rather than the agent's responses when constructing the query.

Examples of Refined Standalone Question:
1. Find all customers located in Germany
2. Get all product details and sort them by name
3. Retrieve the first 5 customers who registered in 2021

Conversation History (Sorted by request time from most recent to oldest):
{history_context}

Follow Up Input: 
user: {query}

**NOTE**: DO NOT prompt the user for additional specific information.
Refined Standalone Question:
</TASK>

<TASK: nl2sql>
You are a programming assistant, and your task is to convert user’s natural language question into executable SQL queries. 
Given the database schema, including table names, column names and their data types, language and the relationships between tables (foreign keys), for the following user input question, you need to follow the steps below to generate SQL:
1. Identify Key Entities:
- Identify key entities from the input question that make up the SQL query, such as table names, column names, conditions.
- Convert entities indicating recent time, such as "now" and "recently," into appropriate time functions.

2. Convert to a Valid SQL Statement:
- Transform the parsed components into a valid SQL statement.
- Ensure the SQL statement has the correct syntax and a logical order of SQL clauses.

3. Handle Incomplete Questions or Bad Cases:
- Address incomplete questions by making the best possible SQL assumption or by requesting clarification.
- If conversion to SQL isn't feasible, output "NOSQL" and suggest improvements in the same language as the input question.

4. Review and Enhance SQL Queries:
- Reflect on the generated SQL query to verify accuracy of table and column names.
- Validate date formats according to database requirements.
- Confirm data types align correctly with database schema definitions.

======================
Two kinds of output formats:
1. if the input question can be converted into SQL:
   ```sql
   SELECT brand, COUNT(DISTINCT product_cate1) AS category_count
   FROM products
   GROUP BY brand;
   ```
2. If conversion to SQL isn't feasible:
   NOSQL
   Suggestions: 
=======================
Database schema:
{dbSchema}
=======================
</TASK>

<TASK: term_expansion>
# 术语扩展
Please generate term expansions for a given set of terms. A table is provided with the terms, their corresponding categories, and the language to use for generating the expansion words. The methods for term expansion include synonyms, related terms, and translations.

Ensure that the expansions are diverse to enrich the vocabulary. If a word has multiple meanings, focus solely on the terms related to its category and avoid exploring other meanings.
=========================
Examples of Input:

| Term       | Category       |Output Language|
|:-----------|:---------------|:--------------|
| apple      | Brand          |English        |
| mouse      | Product_name   |Chinese        |
| innovation | Business       |Japanese       |

=========================
Examples of Output:

| Term       | Term Expansions                                     |
|:-----------|:----------------------------------------------------|
| apple      | Macintosh, iPhone, iPad, tech company, Granny Smith |
| mouse      | 鼠标, 电子鼠标, 笔记本鼠标, 无线鼠标, 光电鼠标 |
| innovation | 革新, 発明, 進歩, アイデア, 創造, 技術革新 |

==========================
NOTE: 
- please strictly follow the output format of the example above.
</TASK>

# 根据错误信息修正SQL
<TASK: sql_revise>
You are an SQL programming expert specializing in diagnosing and correcting errors in SQL queries. Your task involves correcting SQL queries by addressing errors such as non-existent column or table names, JOIN operation issues, number or date format errors, and discrepancies in WHERE clause values. The corrected SQL should execute successfully while preserving the original query's intent. Below are the specific requirements:
1.	Name Non-existence: Substitute non-existent field or table names with the closest match from the database schema in terms of lexical and syntactic similarity.
2.	Join Errors: Resolve any errors arising from JOIN operations.
3.	Number or Date Format Errors: Rectify any errors pertaining to the format of numbers or dates.
4.	Value Issues in WHERE Condition: Replace any non-existent values in the WHERE condition with suggested or semantically similar ones. Use the 'LIKE' operator instead of '=' operator.
5.	Preserve Query Intent: Ensure that corrections do not alter the intended functionality of the query.
6.	Output Format: Provide the corrected SQL query formatted as per the example.

An example of a corrected SQL query
- Database Schema:

Table: Employees
Purpose: save the information of employees
Fields:
employee_id, INTEGER, PRIMARY KEY , COMMENT( unique_identifier)
first_name, VARCHAR, COMMENT(name of employee)
last_name, VARCHAR, COMMENT(surname of employee)
department_id, INTEGER, FOREIGN KEY 

Table: Departments
Fields:
department_id , INTEGER, PRIMARY KEY ,COMMENT(unique identifier)
department_name, VARCHAR, COMMENT(name of department)

- Original SQL :
SELECT e.employee_id, e.first_name, e.last_name, d.department_name FROM Employees e

- Existing errors：
   Join Error: The query involves two tables that need to be joined using a JOIN clause.

- Corrected SQL：
```sql
SELECT e.employee_id, e.first_name, e.last_name, d.department_name
FROM Employees e
JOIN Departments d ON e.department_id = d.department_id;
```

Follow-up inputs:
- Database Schema:：
{dbSchema}

- Original SQL：
{ori_sql}

- Existing Errors：
{err_msgs}

- Corrected SQL:

</TASK>

# 根据db schema生成查询DB的自然语言问题
<TASK: db2nl>
You are provided with a detailed schema of a relational database. This schema includes the names of tables, their columns, data types, and relationships between tables (foreign keys). Your task is to generate various natural language questions that could be asked to query information from this database. The questions should cover a wide range of query types, including but not limited to data retrieval, aggregations, updates, and joins.

Instructions:

Carefully read the provided database schema to understand the structure and relationships between tables.
Generate a set of natural language questions based on the schema. Aim for diversity in the types of questions, including:
Simple retrieval questions
Aggregation and summary questions
Update or modification questions
Questions involving joins across multiple tables
Conditional retrieval questions
Ensure the questions are clear and unambiguous, reflecting typical queries a user might ask to interact with this database.

For each of the above natural language questions in Chinese, convert them into corresponding SQL queries

Example Database Schema:

Input: 
database schema:

1. Customers
CustomerID
Name 
Email 
PhoneNumber 

2. Orders
OrderID
OrderDate 
CustomerID 
TotalAmount 

3. Products
ProductID 
ProductName 
Price 

4. OrderDetails
OrderDetailID
OrderID
ProductID
Quantity
Subtotal

Output:  
Natural Language Question: 找到所有客户的名称和电子邮件地址。
SQL Query:
SELECT Name, Email
FROM Customers;

Natural Language Question: 找出在2024年5月下订单的客户ID和订单ID。
SQL Query:
SELECT CustomerID, OrderID
FROM Orders
WHERE OrderDate BETWEEN '2024-05-01' AND '2024-05-31';

Natural Language Question: 获取所有订单的总金额大于1000的订单ID和总金额。
SQL Query:
SELECT OrderID, TotalAmount
FROM Orders
WHERE TotalAmount > 1000;

Now, generate a comprehensive list of natural language questions and SQL queries based on the provided db schema.
Note, natural language questions must be related to the database schema, and the fields of the SQL query must be within the database schema.
</TASK>

<TASK: db2sql>
You will be provided with a database schema. Your task is to generate a diverse set of SQL queries based on the given schema. 
Ensure that the generated queries involve different tables and fields from the schema, and include various SQL operations (e.g., SELECT, INSERT, UPDATE, DELETE, etc.). 
Provide detailed queries and make each query unique and meaningful. 

Please generate the following types of SQL queries:

A simple SELECT query including multiple fields from one table.
A query with a JOIN operation involving at least two tables.
A SELECT query with a subquery.
An INSERT query to insert data into a table.
An UPDATE query to update specific records in a table.
A DELETE query to delete specific records from a table.
A query including aggregate functions (e.g., COUNT, SUM, AVG, etc.).
A query with GROUP BY and HAVING clauses.
Please ensure that each query aligns with the provided database schema.

Below is the detailed information of the schema:
</TASK>
